// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Engine.Data;

namespace MyBlog.Engine.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190201105049_Initialization")]
    partial class Initialization
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyBlog.Engine.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MyBlog.Engine.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnName("Author_Id");

                    b.Property<DateTime>("DateCreatedGmt");

                    b.Property<int>("PostId")
                        .HasColumnName("Post_Id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MyBlog.Engine.Data.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BeginningOfContent");

                    b.Property<bool>("ContentIsSplitted");

                    b.Property<DateTime>("DateCreatedGmt");

                    b.Property<string>("EndOfContent");

                    b.Property<bool>("Published");

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("MyBlog.Engine.Data.Models.PostCategory", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnName("Post_Id");

                    b.Property<int>("CategoryId")
                        .HasColumnName("Category_Id");

                    b.HasKey("PostId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("MyBlog.Engine.Data.Models.Publisher", b =>
                {
                    b.Property<string>("Login")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Password");

                    b.Property<string>("Salt");

                    b.HasKey("Login");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("MyBlog.Engine.Data.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<bool>("EmailValidate");

                    b.Property<Guid>("EmailValidationToken");

                    b.Property<string>("Issuer")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NameIdentifier")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyBlog.Engine.Data.Models.UserProfilePost", b =>
                {
                    b.Property<int>("UserProfileId")
                        .HasColumnName("UserProfile_Id");

                    b.Property<int>("PostId")
                        .HasColumnName("Post_Id");

                    b.HasKey("UserProfileId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("UserProfilePosts");
                });

            modelBuilder.Entity("MyBlog.Engine.Data.Models.Comment", b =>
                {
                    b.HasOne("MyBlog.Engine.Data.Models.UserProfile", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Engine.Data.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Engine.Data.Models.PostCategory", b =>
                {
                    b.HasOne("MyBlog.Engine.Data.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Engine.Data.Models.Post", "Post")
                        .WithMany("Categories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Engine.Data.Models.UserProfilePost", b =>
                {
                    b.HasOne("MyBlog.Engine.Data.Models.Post", "Post")
                        .WithMany("Followers")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Engine.Data.Models.UserProfile", "UserProfile")
                        .WithMany("PostFollowed")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
